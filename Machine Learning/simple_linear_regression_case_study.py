# -*- coding: utf-8 -*-
"""Simple Linear Regression Case Study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UXQHPK1bqwOVYJ1x7Ob6AM3FbwFFXUhZ

**Step 01 Load Data Set**
"""

dataset = '/content/drive/MyDrive/Colab Notebooks/Employee_StudyHours.csv'
import pandas as pd
df = pd.read_csv(dataset) #dataframe - terminology  2d

df

df.shape

df.info()

df.keys()

"""**Step 2 Visualisation of data**"""

import matplotlib.pyplot as plt

plt.scatter(df.Hours , df['Scores'] , marker='*')
plt.xlabel("Hours ------>")
plt.ylabel("Estimated Score ------>")
plt.title("Employee Score Probability")
plt.show()

#seaborn Heatmap
import seaborn as sns

def get_heatmap(df):
  plt.figure(figsize=(4,2))
  sns.heatmap(df.isnull(),yticklabels = False, cbar=False, cmap='viridis')
  return plt.show()

get_heatmap(df)

"""Step 3  data preprocessing"""

#treating missing values
'''
df.dropna()'''
median_v=df.Hours.median()
mean_v=df.Scores.mean()
print(median_v)
print(mean_v)

import math
df['Hours'] = df.Hours.fillna(median_v)
df['Scores'] = df.Scores.fillna(mean_v)

df

#seaborn Heatmap
import seaborn as sns

def get_heatmap(df):
  plt.figure(figsize=(4,2))
  sns.heatmap(df.isnull(),yticklabels = False, cbar=False, cmap='viridis')
  return plt.show()

get_heatmap(df)

"""**Step 4 Loading the Data**

X -> independent var - features
Y -> dependent var - target
"""

df.head()

#method 1
X = df.iloc[:,:-1].values #This uses the iloc indexer to select all rows (:) and all columns except the last column (:-1).
Y = df.iloc[:,-1:].values #Here, df.iloc[:,-1:] selects all rows (:) and the last column (-1:), which is equivalent to selecting the last column only.
X

#method 2
import numpy as np
X=np.array(df[['Hours']])
Y= np.array(df[['Scores']])
X

"""Step 5 Splitting the data - Train set & Tests set"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)
X_train

#Step 05 Splitting Data - Train Set & Test Set

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2)

X_train

# Step 06 Train the Model / Feeding the Mode / Fitting the Algo


from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(X_train,Y_train)

y_pred = model.predict(X_test)
x_pred = model.predict(Y_test)
y_pred

#Evaluation Method
#from sklearn.metrics import accuracy_score
#from sklearn.metrics import classification_report

#Step 08 Performance Evaluation
model.score(X_test,Y_test)*100

model.score(X_train,Y_train)*100

model.score(X,Y)*100

import matplotlib.pyplot as plt

plt.scatter(X_train , Y_train , marker='*')
plt.xlabel("Hours ------>")
plt.ylabel("Estimated Score ------>")
plt.title("Employee Score Probability")
plt.show()

import matplotlib.pyplot as plt

plt.scatter( X_test, Y_test , marker='*')
plt.xlabel("Hours ------>")
plt.ylabel("Estimated Score ------>")
plt.title("Employee Score Probability")
plt.show()

import matplotlib.pyplot as plt

plt.scatter(X , Y , marker='*')
plt.xlabel("Hours ------>")
plt.ylabel("Estimated Score ------>")
plt.title("Employee Score Probability")
plt.show()

#Visualizing Result


#y = mx+c
model.coef_

model.intercept_

y_pred = model.coef_*X+model.intercept_

#Plotting
plt.scatter(X,Y)
plt.plot(X,y_pred)

# Training Set Evaluation

plt.scatter(X_train,Y_train, color ='red')
plt.plot(X_train, model.predict(X_train))
plt.show()

HourStudied = int(input("enter hours studied"))

y_pred = model.coef_*HourStudied+model.intercept_

y_pred